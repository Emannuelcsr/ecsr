package br.com.project.exception;

import java.util.Map;
import javax.faces.FacesException;
import javax.faces.application.FacesMessage;
import javax.faces.application.NavigationHandler;
import javax.faces.context.ExceptionHandler;
import javax.faces.context.ExceptionHandlerWrapper;
import javax.faces.context.FacesContext;
import javax.faces.event.ExceptionQueuedEvent;
import javax.faces.event.ExceptionQueuedEventContext;
import org.hibernate.SessionFactory;
import org.primefaces.context.RequestContext;
import br.com.framwork.hibernate.session.HibernateUtil;

/**
 * üìå Manipulador de exce√ß√µes customizado para JSF.
 * 
 * Respons√°vel por capturar, tratar e exibir mensagens de erro amig√°veis
 * ao usu√°rio final, al√©m de redirecionar para p√°ginas de erro customizadas
 * e logar problemas para an√°lise posterior.
 */
public class CustomExceptionHandler extends ExceptionHandlerWrapper {

    /** Handler padr√£o encapsulado */
    private ExceptionHandler wrapperd;

    /** Contexto JSF atual */
    final FacesContext facesContext = FacesContext.getCurrentInstance();

    /** Mapa de atributos da requisi√ß√£o */
    final Map<String, Object> requestMap = facesContext.getExternalContext().getRequestMap();

    /** Manipulador de navega√ß√£o */
    final NavigationHandler navigationHandler = facesContext.getApplication().getNavigationHandler();


    // =======================================================================
    // üîß Construtor: recebe o ExceptionHandler original do JSF
    // =======================================================================

    
    
    public CustomExceptionHandler(ExceptionHandler exceptionHandler) {

        // Armazena o handler padr√£o
        this.wrapperd = exceptionHandler;
    	
        // Itera sobre todas as exce√ß√µes n√£o tratadas
        final java.util.Iterator<ExceptionQueuedEvent> iterator = getUnhandledExceptionQueuedEvents().iterator();

        while (iterator.hasNext()) {

            ExceptionQueuedEvent event = iterator.next();
            ExceptionQueuedEventContext context = (ExceptionQueuedEventContext) event.getSource();

            // Obt√©m a exce√ß√£o do contexto
            Throwable exeption = context.getException();

            try {
                
                // üîé Armazena a mensagem da exce√ß√£o para exibi√ß√£o posterior
                requestMap.put("exceptionMessage", exeption.getMessage());

                // ‚ö†Ô∏è Trata exce√ß√µes conhecidas com mensagens espec√≠ficas
                if (exeption != null && exeption.getMessage() != null && exeption.getMessage().contains("ConstraintViolationException")) {

                    FacesContext.getCurrentInstance().addMessage("msg",
                        new FacesMessage(FacesMessage.SEVERITY_WARN,
                            "Registro n√£o pode ser removido por estar associado.", ""));

                } else if (exeption != null && exeption.getMessage() != null && exeption.getMessage().contains("org.hibernate.StaleObjectStateException")) {

                    FacesContext.getCurrentInstance().addMessage("msg",
                        new FacesMessage(FacesMessage.SEVERITY_ERROR,
                            "Registro foi atualizado ou exclu√≠do por outro usu√°rio. Consulte novamente.", ""));

                } else {

                    // üßØ Tratamento de exce√ß√µes gen√©ricas
                    FacesContext.getCurrentInstance().addMessage("msg",
                        new FacesMessage(FacesMessage.SEVERITY_FATAL,
                            "O sistema se recuperou de um erro inesperado.", ""));

                    FacesContext.getCurrentInstance().addMessage("msg",
                        new FacesMessage(FacesMessage.SEVERITY_INFO,
                            "Voc√™ pode continuar usando o sistema normalmente.", ""));

                    FacesContext.getCurrentInstance().addMessage("msg",
                        new FacesMessage(FacesMessage.SEVERITY_FATAL,
                            "O erro foi causado por:\n" + exeption.getMessage(), ""));

                    // üö® Alertas visuais via PrimeFaces
                    RequestContext.getCurrentInstance().execute("alert('O sistema se recuperou de um erro inesperado.')");
                    RequestContext.getCurrentInstance().showMessageInDialog(
                        new FacesMessage(FacesMessage.SEVERITY_INFO,
                            "Erro", "O sistema se recuperou de um erro inesperado."));

                    // üîÅ Redirecionamento para p√°gina de erro
                    navigationHandler.handleNavigation(facesContext, null,
                        "/error/error.jsf?faces-redirect=true&expired=true");
                }

                // üõë Impede que o JSF continue com o ciclo de renderiza√ß√£o
                facesContext.renderResponse();

            } finally {

                // üßπ Garante que transa√ß√µes abertas sejam revertidas
                SessionFactory factory = HibernateUtil.getSessionFactory();
                if (factory.getCurrentSession().getTransaction().isActive()) {
                    factory.getCurrentSession().getTransaction().rollback();
                }

                // üìã Loga o erro completo para desenvolvedores
                exeption.printStackTrace();

                // üóëÔ∏è Remove o evento tratado da fila
                iterator.remove();
            }
        }



        // Continua com o tratamento padr√£o do JSF
        getWrapped().handle();
    }


    // =======================================================================
    // üì¶ Implementa√ß√£o obrigat√≥ria da ExceptionHandlerWrapper
    // =======================================================================

    @Override
    public ExceptionHandler getWrapped() {
        return wrapperd;
    }

    @Override
    public void handle() throws FacesException {
        super.handle();
    }
}